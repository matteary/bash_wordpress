#!/usr/bin/env bash

function f_create_image(){
  aws ec2 create-image --instance-id $(f_get_instance_id) --name "${v_ami_name}" >> ${v_params}
}

function f_deregister_image(){
  aws ec2 deregister-image --image-id $(f_get_ami_id)
}

function f_delete_snapshots(){
  aws ec2 delete-snapshot --snapshot-id $(f_get_image_snapshots)
}

function f_get_ami_id(){
  aws ec2 describe-images --owners self --query "Images[?Name=='${v_ami_name}'].[ImageId]" --output text
}

function f_get_ami_region(){
  aws ec2 describe-images --image-ids $(f_get_ami_id)
}

function f_get_image_id(){
  aws ec2 describe-images --owners self --query "Images[?Name=='${v_ami_name}'].ImageId[]" --output text
}

function f_get_image_snapshots(){
  aws ec2 describe-images --owner self --query "Images[?Name=='${v_ami_name}'].BlockDeviceMappings[].Ebs[].SnapshotId[]" --output text
}

function f_get_image_state(){
  aws ec2 describe-images --owners self --image-ids $(f_get_image_id) --query "Images[].[State]" --output text
}

function f_get_instance_group_id(){
  aws ec2 describe-instances --instance-ids $(f_get_instance_id) --query "Reservations[].Instances[].SecurityGroups[].[GroupId]" --output text
}

function f_get_instance_id(){
  grep -i instanceid ${v_params} | awk -F"\"" '{print $4}'
}

function f_get_instance_public_dns(){
  aws ec2 describe-instances --instance-ids "${1}" --query 'Reservations[].Instances[].[PublicDnsName]' --output text
}

function f_get_instance_state(){
  aws ec2 describe-instances --instance-ids ${1} --query 'Reservations[].Instances[].State[].[Name]' --output text
}

function f_get_instance_subnet_id(){
  aws ec2 describe-instances --instance-ids $(f_get_instance_id) --query "Reservations[].Instances[].[SubnetId]" --output text
}

function f_get_instance_az(){
  aws ec2 describe-instances --instance-ids $(f_get_instance_id) --query "Reservations[].Instances[].Placement[].[AvailabilityZone]" --output text
}

function f_get_snapshot_state(){
  aws ec2 describe-snapshots --owner self --snapshot-ids $(f_get_image_snapshots) --query "Snapshots[].[State]" --output text
}

function f_get_vpc_id(){
  aws ec2 describe-instances --instance-ids $(f_get_instance_id) --query "Reservations[].Instances[].VpcId[]" --output text
}

function f_run_instances(){
  aws ec2 run-instances --image-id ${v_ami_id} --key-name ${v_key_name} --security-groups ${v_security_group} --instance-type ${v_instance_type} --count 1 >> ${v_params}
}

function f_tag_resources(){
  aws ec2 create-tags --resources ${1} --tags ${2}
}

function f_terminate_instances(){
  aws ec2 terminate-instances --instance-ids $(f_get_instance_id) >> /dev/null
}

function f_wait_for_image_state(){
  while true; do
    until [ "$(f_get_image_state)" == "${1}" ]; do
      sleep ${v_wait_seconds}
      echo -e "\t\t\t\t$(f_get_image_state)"
    done
    break
  done
}

function f_wait_for_instance_state(){
  while true; do
    until [ "${v_instance_state}" == "${1}" ]; do
      sleep ${v_wait_seconds}
      local v_instance_state=$(f_get_instance_state ${2})
      echo -e "\t\t\t\t$(f_get_instance_state ${2})"
    done
    break
  done
}

function f_wait_for_instance_terminated(){
  while true; do
    until [ "$(f_get_instance_state ${1})" == 'terminated' ]; do
      sleep ${v_wait_seconds}
      echo -e "\t\t\t\t$(f_get_instance_state ${1})"
    done
    break
  done
}

function f_wait_for_snapshot_state(){
  while true; do
    until [ "${v_snapshot_state}" == "${1}" ]; do
      sleep ${v_wait_seconds}
      local v_snapshot_state=$(f_get_snapshot_state) > /dev/null
      echo -e "\t\t\t\tpending"
    done
    break
  done
}
