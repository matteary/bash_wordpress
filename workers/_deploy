#!/usr/bin/env bash

function f_deploy(){
  # This will create or replace a key pair to be used for ssh
  echo -e "\t\tCreating a key pair [${v_key_name}]..."
  f_test_key_pair

  # This will create an ec2 security group used for accessing services (SSH, HTTP)
  echo -e "\t\tCreating security group [${v_security_group}]..."
  f_create_security_group
  echo -e "\t\t\tAdding ports [${v_allowed_ports}]..."
  f_allow_ports

  # This will create an ec2 instance
  echo -e "\t\tCreating instance..."
  f_run_instances
  echo -e "\t\t\tNaming instance [$(f_get_instance_id)]..."
  f_tag_resources $(f_get_instance_id) ${v_tag_instance}
  echo -e "\t\t\tWaiting for instance [$(f_get_instance_id)]..."
  f_wait_for_instance_state "running" $(f_get_instance_id)

  # This will install and enable apache with a generic index.html
  echo -e "\t\t\tWaiting for SSH access..."
  f_wait_for_ssh
  echo -e "\t\tConfiguring Apache on instance..."
  echo -e "\t\t\tUpdating repos..."
  f_ubuntu_pkg_update
  echo -e "\t\t\tInstalling apache..."
  f_ubuntu_pkg_install_apache2
  echo -e "\t\t\tCreating index.html..."
  f_create_index_html
  echo -e "\t\t\tStarting and Enabling apache service..."
  f_ubuntu_enable_start_apache2

  # Create RDS Instances
  echo -e "\t\tCreating RDS Instance..."
  f_create_db_instance
  echo -e "\t\t\tWaiting for DB to be ready [updates every $((v_wait_seconds*12)) seconds]..."
  f_wait_for_db "available" 12

  # Fetch WordPress
  echo -e "\t\tInstalling WordPress..."
  echo -e "\t\t\tFetching WordPress..."
  f_get_wordpress
  echo -e "\t\t\tExtracting to /var/www/html/${v_site_name}..."
  f_extract_wordpress
  echo -e "\t\t\tMap to DB..."
  f_attach_to_rds
  echo -e "\t\t\tCreate virtualhost..."
  f_create_virtualhost

  # This will create an Amazon Machine Image (AMI) for use with an ELB
  echo -e "\t\tCreating AMI..."
  f_create_image
  echo -e "\t\t\tWaiting for AMI creation..."
  f_wait_for_image_state "available"
  echo -e "\t\t\tTagging AMI..."
  f_tag_resources $(f_get_image_id) ${v_tag_image}
  echo -e "\t\t\tWaiting for Snapshot creation..."
  f_wait_for_snapshot_state "completed"
  echo -e "\t\t\tTagging Snapshots..."
  f_tag_resources $(f_get_image_snapshots) ${v_tag_image}

  # This will create an ELB to front our webserver
  echo -e "\t\tCreating ELB..."
  f_create_elb
  echo -e "\t\t\t[$(f_get_elb_dnsname)]"

  # This will create an Autoscaler Group
  echo -e "\t\tCreating Autoscaler..."
  echo -e "\t\t\tCreating Autoscaler launch configuration..."
  f_create_autoscaler_config
  echo -e "\t\t\tCreating Autoscaler group..."
  f_create_autoscaler_group ${v_autoscaler_group_min_size} ${v_autoscaler_group_max_size} ${v_autoscaler_group_desired_size}

  # Create Autoscaler Policies
  echo -e "\t\t\tCreating Autoscaler policies..."
  f_create_autoscaler_policy "${v_autoscaler_policy_name_scalein}-${v_key}" "${v_autoscaler_policy_scalein}" > ${_srcDir}/deployments/${v_key}/as_policy_scalein.arn
  f_create_autoscaler_policy "${v_autoscaler_policy_name_scaleout}-${v_key}" "${v_autoscaler_policy_scaleout}" > ${_srcDir}/deployments/${v_key}/as_policy_scaleout.arn

  # Create CloudWatch alarm-actions
  echo -e "\t\tCreating CloudWatch alarms..."
  f_create_cloudwatch_alarms "${v_cloudwatch_scaleout_alarm_name}-${v_key}" "${v_cloudwatch_scaleout_metric_name}" "${v_cloudwatch_scaleout_namespace}" "${v_cloudwatch_scaleout_period}" "${v_cloudwatch_scaleout_threshold}" "${v_cloudwatch_scaleout_comp_operator}" "${v_cloudwatch_scaleout_eval_periods}" "$(cat ${_srcDir}/deployments/${v_key}/as_policy_scaleout.arn)"
  f_create_cloudwatch_alarms "${v_cloudwatch_scalein_alarm_name}-${v_key}" "${v_cloudwatch_scalein_metric_name}" "${v_cloudwatch_scalein_namespace}" "${v_cloudwatch_scalein_period}" "${v_cloudwatch_scalein_threshold}" "${v_cloudwatch_scalein_comp_operator}" "${v_cloudwatch_scalein_eval_periods}" "$(cat ${_srcDir}/deployments/${v_key}/as_policy_scalein.arn)"

  # Terminate uneeded instance
  #echo -e "\t\tTerminating original instance"
  #f_terminate_instances

  # Display ELB DNS Name
  echo -e "\n\tYou can now access the following website;"
  echo -e "\n\t\thttp://$(f_get_instance_public_dns $(f_get_instance_id))"
  echo -e "\t\thttp://$(f_get_elb_dnsname)\n"

  # Display Apache Load Balancing option
  # echo -e "\n\tYou can test the autoscaler by running this script again with the following options;"
  # echo -e "\n\t\tIncrease CPUUtilization: ./`basename \"$0\"` --increase-load\n"
}
