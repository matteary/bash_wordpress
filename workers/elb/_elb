#!/usr/bin/env bash

function f_create_elb(){
  aws elb create-load-balancer --load-balancer-name ${v_elb_name} --security-groups $(f_get_instance_group_id) --listeners "Protocol=HTTP,LoadBalancerPort=80,InstanceProtocol=HTTP,InstancePort=80" --subnets $(f_get_instance_subnet_id) --tags "${v_tag_elb}" >> /dev/null
}

# Deprecated by f_get_elb_dnsname
#function f_get_elb_canonical(){
#  aws elb describe-load-balancers --load-balancer-names ${v_elb_name} --query "LoadBalancerDescriptions[].[CanonicalHostedZoneName]" --output text
#}

function f_get_elb_dnsname(){
  aws elb describe-load-balancers --query "LoadBalancerDescriptions[?LoadBalancerName=='${v_elb_name}'].[DNSName]" --output text
}

function f_get_elb_status(){
  for i in $(aws elb describe-instance-health --load-balancer-name ${v_elb_name} --query "InstanceStates[].State" --output text); do
    echo "${i}"
  done
}

function f_delete_elb(){
  aws elb delete-load-balancer --load-balancer-name ${v_elb_name}
}

function f_wait_for_elb(){
  while true; do
    until [ "${v_inservice}" == "True" ]; do
      for i in $(echo "$(f_get_elb_status)"); do
        if [[ "${i}" == 'InService' ]]; then
          local v_inservice="True"
        fi
        echo -e "\t\t\t\t${i}"
      done
      sleep ${v_wait_seconds}
    done
    break
  done
}
